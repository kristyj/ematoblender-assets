plugins {
    id 'groovy'
}

sourceSets {
    blend
}

processBlendResources {
    from "src/blend/scripts"
}

/* ------------------------------------------------------------------------------------------------------------------ */
// Example tasks

// Example task illustrating creating a new blend file with in-task instructions
task rotateCube(type: BlenderExec) {
    dependsOn processBlendResources
    ext.destBlendFile = file("$sourceSets.blend.output.resourcesDir/cube_rot.blend")
    srcFile = file("$sourceSets.blend.output.resourcesDir/cube.blend")
    destFile = destBlendFile
    resourcesDir = "$sourceSets.blend.output.resourcesDir"
    script = """|bpy.data.objects['Cube'].rotation_euler = ${[0.5] * 3}
                |bpy.ops.wm.save_as_mainfile(filepath='$destFile', compress=True)""".stripMargin()
}

// Example task illustrating a render using the input from another task with in-task instructions
task renderCube(type: BlenderExec) {
    dependsOn rotateCube
    srcFile = rotateCube.destBlendFile
    destFile = file("$buildDir/render.png")
    script = """|bpy.data.scenes['Scene'].render.filepath = '$destFile'
                |bpy.ops.render.render(write_still=True)""".stripMargin()
}

// Example task illustrating creating a new blend file using a script file
task moveCubeFromFile(type: BlenderExec) {
    dependsOn processBlendResources
    ext.destBlendFile = file("$sourceSets.blend.output.resourcesDir/example_moved.blend")
    srcFile = file("$sourceSets.blend.output.resourcesDir/cube.blend")
    destFile = destBlendFile
    scriptFile = file("$sourceSets.blend.output.resourcesDir/asset_manipulation_example.py")
}
/* ------------------------------------------------------------------------------------------------------------------ */

// Scene construction tasks

/* These tasks are used to create the building blocks of the Ematoblender scene, such as the game loop,
*  putting Blender into game mode
*  creating (hidden) assets such as the coil objects (that later will follow the location of motion-capture sensors).
*  They are also available as a Panel in Blender at present (the panel is constructed using a Blender startup script).
* */

task addGameLogic(type: BlenderExec) {
    dependsOn processBlendResources
    ext.destBlendFile = file("$sourceSets.blend.output.resourcesDir/game_logic_only.blend")
    srcFile = file("$sourceSets.blend.output.resourcesDir/cube.blend")
    destFile = destBlendFile
    resourcesDir = "$sourceSets.blend.output.resourcesDir"
    script = """|from bpy_add_game_objects import add_game_master
                |add_game_master()
                |from asset_manipulation_example import save_blend_to_dest
                |save_blend_to_dest()""".stripMargin()
}

task addGameCameras(type: BlenderExec) {
    dependsOn addGameLogic
    ext.destBlendFile = file("$sourceSets.blend.output.resourcesDir/game_logic_cameras.blend")
    srcFile = file("$sourceSets.blend.output.resourcesDir/game_logic_only.blend")
    destFile = destBlendFile
    resourcesDir = "$sourceSets.blend.output.resourcesDir"
    script = """|import bpy_setup_cameras as cam
                |cam.main()
                |from asset_manipulation_example import save_blend_to_dest
                |save_blend_to_dest()""".stripMargin()
}

task loadGameMenus(type: BlenderExec) {
    dependsOn addGameCameras
    // todo: version the type of menus that are added (the menu blend will evolve with time)
    // todo: the information about the location is in the properties script, see within Python script
    ext.destBlendFile = file("$sourceSets.blend.output.resourcesDir/game_logic_menus.blend")
    srcFile = file("$sourceSets.blend.output.resourcesDir/game_logic_cameras.blend")
    resourcesDir = "$sourceSets.blend.output.resourcesDir"
    destFile = destBlendFile
    script = """|import bpy_import_assets as ia
                |ia.add_statusbar_scene('$resourcesDir')
                |ia.add_menu_scene('$resourcesDir')
                |from asset_manipulation_example import save_blend_to_dest
                |save_blend_to_dest()""".stripMargin()
}

task addCoilObjects(type: BlenderExec) {
    dependsOn loadGameMenus
    ext.destBlendFile = file("$sourceSets.blend.output.resourcesDir/game_logic_coils.blend")
    srcFile = file("$sourceSets.blend.output.resourcesDir/game_logic_menus.blend")
    destFile = destBlendFile
    resourcesDir = "$sourceSets.blend.output.resourcesDir"
    script = """|from bpy_add_game_objects import spawn_hidden_coils
                |from asset_properties import naming_rule_coil_mesh
                |spawn_hidden_coils(naming_rule_coil_mesh)
                |from asset_manipulation_example import save_blend_to_dest
                |save_blend_to_dest()""".stripMargin()
}

/* ------------------------------------------------------------------------------------------------------------------ */

/* MakeHuman import tasks
* Initial import of .mhx avatar
* Scaling and re-positioning as yet manually performed
* Delete body, leave only head
* Make vertex groups for lips, cheek-opening, tongue
* Turn off backface-culling
* Set textures for particular vertex groups
* Set viewing settings for the cameras
* */

task importMakeHuman(type:BlenderExec) {
    dependsOn processBlendResources // later should depend on loadGameMenus (ie all game settings ready)
    ext.destBlendFile = file("$sourceSets.blend.output.resourcesDir/makehuman_imported.blend")
    srcFile = file("$sourceSets.blend.output.resourcesDir/cube.blend")
    destFile = destBlendFile
    resourcesDir = "$sourceSets.blend.output.resourcesDir"
    blenderPlugins = "io_import_scene_mhx" // run the command line with: blender --addons io_import_scene_mhx
    script = """|bpy.context.user_preferences.system.use_scripts_auto_execute = True
                |import os
                |import asset_properties as pps
                |mhxpath = os.path.normpath("$resourcesDir/"+pps.makehuman_filename)
                |bpy.ops.import_scene.makehuman_mhx(filepath=mhxpath, clothes=False, shapekeys=False, shapedrivers=False, rigify=False)
                |from asset_manipulation_example import save_blend_to_dest
                |save_blend_to_dest()""".stripMargin()

}

task cutHeadMakeHuman(type:BlenderExec) {
    // select the vertex groups DEF-neck, DEF-head, DEF-jaw and delete everything else
    //bpy.data.objects['default_female:Body'].vertex_groups['DEF-head'] // this is where the object is stored
    //>>> bpy.ops.object.vertex_group_set_active(group='DEF-chest') // make a vertex group active
    //bpy.ops.mesh.delete(type='VERT') // delete the selected vertices
    dependsOn importMakeHuman
    ext.destBlendFile = file("$sourceSets.blend.output.resourcesDir/makehuman_head.blend")
    srcFile = file("$sourceSets.blend.output.resourcesDir/makehuman_imported.blend")
    destFile = destBlendFile
    resourcesDir = "$sourceSets.blend.output.resourcesDir"
    blenderInForeground = true
    script = """|from bpy_head_preparation import cut_head
                |cut_head()
                |from asset_manipulation_example import save_blend_to_dest
                |save_blend_to_dest()""".stripMargin()
}

task lipsToOrigin(type:BlenderExec) {
    dependsOn cutHeadMakeHuman
    ext.destBlendFile = file("$sourceSets.blend.output.resourcesDir/makehuman_centered.blend")
    srcFile = file("$sourceSets.blend.output.resourcesDir/makehuman_head.blend")
    destFile = destBlendFile
    resourcesDir = "$sourceSets.blend.output.resourcesDir"
    blenderInForeground = true
    script = """|from bpy_head_preparation import set_origin_to_ll_move_to_origin
                |set_origin_to_ll_move_to_origin()
                |from asset_manipulation_example import save_blend_to_dest
                |save_blend_to_dest()""".stripMargin()
}

task scaleAroundOrigin(type:BlenderExec) {
    dependsOn scaleAroundOrigin

}
/* ------------------------------------------------------------------------------------------------------------------ */

class BlenderExec extends DefaultTask {

    @InputFile
    @Optional
    File srcFile

    @Input
    @Optional
    String script

    @Input
    @Optional
    String resourcesDir

    @Input
    @Optional
    String blenderPlugins // comma-separated string of plugin names

    @Input
    @Optional
    Boolean blenderInForeground

    @InputFile
    @Optional
    File scriptFile

    @OutputFile
    File destFile

    File createScriptFile(String contents) {
        def scriptFile = project.file("$temporaryDir/script.py")
        scriptFile.withWriter { script ->
            script.println "import bpy"

            // give access to the contents in the scripts folder
            if (getInputs().getProperties().containsKey("resourcesDir")){
                script.println "import sys"
                script.println "sys.path.append('${resourcesDir.replaceAll('\\\\', '\\\\\\\\')}')"
            } else {println("there is no resourcesDir availabe to import for this task")}

            contents.eachLine { line ->
                script.println line.replaceAll("\\\\","\\\\\\\\")
            }
            script.println "bpy.ops.wm.quit_blender()"
        }
        scriptFile
    }

    @TaskAction
    void run() {
        new ByteArrayOutputStream().withStream { out ->
            project.exec {
                // '--' argument causes Blender to ignore following arguments
                // therefore destFile can be used for saving from within script using index sys.argv.index('--')+1
                // -Y stops Blender from running startup scripts
                commandLine 'blender', srcFile, blenderInForeground ? '':'--background', blenderPlugins ? '--addons':'', blenderPlugins ?: '', '--python', scriptFile ?: createScriptFile(script), '--', destFile
                standardOutput = out
                errorOutput = out
            }
            logger.info out.toString()
        }
    }
}
